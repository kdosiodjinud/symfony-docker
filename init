#!/bin/bash

INSTALLED=./kubernetes/project_info
if test -f "$INSTALLED"; then
    echo "Project is inicialized!"
    exit
fi

while true; do
    read -p 'Project ID [a-Z0-1_]: ' PROJECT_ID
    read -p "You set '${PROJECT_ID}' (y/n): " input
    case $input in
        [yY]*)
            break
            ;;
         *)
            echo 'Ok, set value again' >&2
    esac
done

while true; do
    read -p 'Project name (more then 4 chars): ' PROJECT_NAME
    read -p "You set '${PROJECT_NAME}' (y/n): " input
    case $input in
        [yY]*)
            break
            ;;
         *)
            echo 'Ok, set value again' >&2
    esac
done

while true; do
    read -p 'Your gmail for gCloud: ' USER_GMAIL
    read -p "You set '${USER_GMAIL}' (y/n): " input
    case $input in
        [yY]*)
            break
            ;;
         *)
            echo 'Ok, set value again' >&2
    esac
done

gcloud auth login
gcloud config set account ${USER_GMAIL}

gcloud projects create ${PROJECT_ID} --name="${PROJECT_NAME}"
echo "PROJECT_ID=${PROJECT_ID}" > ./kubernetes/project_info

gcloud projects list

gcloud config configurations create ${PROJECT_ID}
gcloud config set account ${USER_GMAIL}
gcloud config set project ${PROJECT_ID}

echo "Your billing accounts:"
gcloud beta billing accounts list
while true; do
    read -p 'Link project with billing account id: ' BILLING_ACCOUNT_ID
    read -p "You set '${BILLING_ACCOUNT_ID}' (y/n): " input
    case $input in
        [yY]*)
            break
            ;;
         *)
            echo 'Ok, set value again' >&2
    esac
done
gcloud beta billing projects link ${PROJECT_ID} --billing-account=${BILLING_ACCOUNT_ID}

gcloud compute zones list
echo "Select zone and type name (first column in list):"
while true; do
    read -p 'Zone: ' ZONE
    read -p "You set '${ZONE}' (y/n): " input
    case $input in
        [yY]*)
            break
            ;;
         *)
            echo 'Ok, set value again' >&2
    esac
done
gcloud config set compute/zone ${ZONE}

gcloud compute regions list
echo "Select region and type name (first column in list):"
while true; do
    read -p 'Region: ' REGION
    read -p "You set '${REGION}' (y/n): " input
    case $input in
        [yY]*)
            break
            ;;
         *)
            echo 'Ok, set value again' >&2
    esac
done
gcloud config set compute/region ${REGION}

gcloud config configurations activate ${PROJECT_ID}

gcloud config configurations list

gcloud iam service-accounts create ${PROJECT_ID}-account --description="Account for ${PROJECT_ID}" --display-name="${PROJECT_NAME} account"
echo "Services accounts:"
gcloud iam service-accounts list

echo "Copy service account email:"
while true; do
    read -p 'Account: ' SERVICE_ACCOUNT
    read -p "You set '${SERVICE_ACCOUNT}' (y/n): " input
    case $input in
        [yY]*)
            break
            ;;
         *)
            echo 'Ok, set value again' >&2
    esac
done

echo "Enabling gcloud services"
gcloud services enable container.googleapis.com

echo "Creating cluster:"
gcloud container clusters create ${PROJECT_ID}-cluster --num-nodes 1 --service-account ${SERVICE_ACCOUNT}

echo "Create first build:"
echo "- php-fpm"
docker build -f docker/php-fpm/Dockerfile-prod -t gcr.io/${PROJECT_ID}/php-fpm:0.0.1 . --no-cache
echo "- nginx"
docker build -f docker/nginx/Dockerfile-prod -t gcr.io/${PROJECT_ID}/nginx:0.0.1 . --no-cache

echo "Push images to google repository:"
docker push gcr.io/${PROJECT_ID}/php-fpm:0.0.1
docker push gcr.io/${PROJECT_ID}/nginx:0.0.1

echo "First deployment:"
echo "- create php service"
kubectl apply -f kubernetes/php_service.yaml

echo "- create php-fpm deploy"
sed "s/VERSION_PLACEHOLDER/0.0.1/g" kubernetes/php_deployment.yaml > kubernetes/php_deployment_fill.yaml
sed -ie "s/PROJECT_ID_PLACEHOLDER/${PROJECT_ID}/g" kubernetes/php_deployment_fill.yaml
kubectl apply -f kubernetes/php_deployment_fill.yaml

echo "- create nginx deploy"
sed "s/VERSION_PLACEHOLDER/0.0.1/g" kubernetes/nginx_deployment.yaml > kubernetes/nginx_deployment_fill.yaml
sed -ie "s/PROJECT_ID_PLACEHOLDER/${PROJECT_ID}/g" kubernetes/nginx_deployment_fill.yaml
kubectl apply -f kubernetes/nginx_deployment_fill.yaml

echo "- clean up"
rm kubernetes/nginx_deployment_fill.yaml kubernetes/php_deployment_fill.yaml
rm kubernetes/nginx_deployment_fill.yamle kubernetes/php_deployment_fill.yamle

echo "Create LoadBalancer:"
kubectl expose deployment nginx --port=80 --type=LoadBalancer

echo "Get your external IP for your DNS (if status pending, try again command kubectl get svc):"
kubectl get svc
