#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli - Symfony application\n"
    echo 
  else
    printf "cli - Symfony application\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli [command]\n"
  printf "  cli [command] --help | -h\n"
  printf "  cli --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  bash    Get bash from php-fpm container"
  echo "  start   Start application containers"
  echo "  stop    Stop application containers"
  echo "  tests   Run test in PHP container"
  echo "  init    Update config files for your settings (dependent to .git and github repository)"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
cli_bash_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli bash - Get bash from php-fpm container\n"
    echo 
  else
    printf "cli bash - Get bash from php-fpm container\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli bash\n"
  printf "  cli bash --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cli bash\n"
    echo

  fi
}

# :command.usage
cli_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli start - Start application containers\n"
    echo 
  else
    printf "cli start - Start application containers\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli start\n"
  printf "  cli start --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cli start\n"
    echo

  fi
}

# :command.usage
cli_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli stop - Stop application containers\n"
    echo 
  else
    printf "cli stop - Stop application containers\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli stop\n"
  printf "  cli stop --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cli stop\n"
    echo

  fi
}

# :command.usage
cli_tests_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli tests - Run test in PHP container\n"
    echo 
  else
    printf "cli tests - Run test in PHP container\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli tests [TYPE]\n"
  printf "  cli tests --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  TYPE"
    printf "    Test for run\n"
    printf "    Default: all\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cli tests\n"
    printf "  cli tests phpstan\n"
    printf "  cli tests phpunit\n"
    printf "  cli tests ecs\n"
    echo

  fi
}

# :command.usage
cli_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli init - Update config files for your settings (dependent to .git and github repository)\n"
    echo 
  else
    printf "cli init - Update config files for your settings (dependent to .git and github repository)\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli init\n"
  printf "  cli init --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.command_functions
# :command.function
cli_bash_command() {
  # :src/bash_command.sh
  #!/usr/bin/bash
  docker exec -it php-fpm bash
}

# :command.function
cli_start_command() {
  # :src/start_command.sh
  #!/usr/bin/bash
  docker-compose -f ./docker/docker-compose.yml up -d
}

# :command.function
cli_stop_command() {
  # :src/stop_command.sh
  #!/usr/bin/bash
  docker-compose -f ./docker/docker-compose.yml stop
}

# :command.function
cli_tests_command() {
  # :src/tests_command.sh
  # shellcheck disable=SC2154
  case "${args[type]}" in
  
    "all")
          docker exec -it php-fpm bash -c 'composer ecs && composer phpunit && composer phpstan'
      ;;
  
    "phpstan")
          docker exec -it php-fpm bash -c 'composer phpstan'
      ;;
  
    "phpunit")
          docker exec -it php-fpm bash -c 'composer phpunit'
      ;;
  
    "ecs")
          docker exec -it php-fpm bash -c 'composer ecs'
      ;;
  
    *)
  
      ;;
  esac
}

# :command.function
cli_init_command() {
  # :src/init_command.sh
  GIT_REPO_NAME=$(cut -d ":" -f2 <<< $(git config --get remote.origin.url))
  REPO_NAME=${GIT_REPO_NAME/.git/}
  APP_NAMESPACE=${REPO_NAME/\//-}
  
  find ./kubernetes/ -type f -exec sed -i '' -e "s/#{APP_NAMESPACE}#/$APP_NAMESPACE/g" {} \;
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  bash )
    action="bash"
    shift
    cli_bash_parse_requirements "$@"
    shift $#
    ;;    
  
  start )
    action="start"
    shift
    cli_start_parse_requirements "$@"
    shift $#
    ;;    
  
  stop )
    action="stop"
    shift
    cli_stop_parse_requirements "$@"
    shift $#
    ;;    
  
  tests )
    action="tests"
    shift
    cli_tests_parse_requirements "$@"
    shift $#
    ;;    
  
  init )
    action="init"
    shift
    cli_init_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    cli_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cli_bash_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_bash_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="bash"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cli_start_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_start_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="start"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cli_stop_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_stop_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="stop"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cli_tests_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_tests_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="tests"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[type]} ]]; then
        args[type]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
  [[ -n ${args[type]} ]] || args[type]="all"
}

# :command.parse_requirements
cli_init_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_init_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="init"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.initialize
initialize() {
  version="0.0.1"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ $action == "bash" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_bash_usage
    else
      cli_bash_command
    fi
  
  elif [[ $action == "start" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_start_usage
    else
      cli_start_command
    fi
  
  elif [[ $action == "stop" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_stop_usage
    else
      cli_stop_command
    fi
  
  elif [[ $action == "tests" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_tests_usage
    else
      cli_tests_command
    fi
  
  elif [[ $action == "init" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_init_usage
    else
      cli_init_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    cli_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
